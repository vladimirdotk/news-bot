// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/vladimirdotk/news-bot/internal/domain"
)

// SourceDetectorMock implements command.SourceDetector
type SourceDetectorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDetect          func(ctx context.Context, sourceURL string) (s1 domain.SourceType)
	inspectFuncDetect   func(ctx context.Context, sourceURL string)
	afterDetectCounter  uint64
	beforeDetectCounter uint64
	DetectMock          mSourceDetectorMockDetect
}

// NewSourceDetectorMock returns a mock for command.SourceDetector
func NewSourceDetectorMock(t minimock.Tester) *SourceDetectorMock {
	m := &SourceDetectorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DetectMock = mSourceDetectorMockDetect{mock: m}
	m.DetectMock.callArgs = []*SourceDetectorMockDetectParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mSourceDetectorMockDetect struct {
	mock               *SourceDetectorMock
	defaultExpectation *SourceDetectorMockDetectExpectation
	expectations       []*SourceDetectorMockDetectExpectation

	callArgs []*SourceDetectorMockDetectParams
	mutex    sync.RWMutex
}

// SourceDetectorMockDetectExpectation specifies expectation struct of the SourceDetector.Detect
type SourceDetectorMockDetectExpectation struct {
	mock    *SourceDetectorMock
	params  *SourceDetectorMockDetectParams
	results *SourceDetectorMockDetectResults
	Counter uint64
}

// SourceDetectorMockDetectParams contains parameters of the SourceDetector.Detect
type SourceDetectorMockDetectParams struct {
	ctx       context.Context
	sourceURL string
}

// SourceDetectorMockDetectResults contains results of the SourceDetector.Detect
type SourceDetectorMockDetectResults struct {
	s1 domain.SourceType
}

// Expect sets up expected params for SourceDetector.Detect
func (mmDetect *mSourceDetectorMockDetect) Expect(ctx context.Context, sourceURL string) *mSourceDetectorMockDetect {
	if mmDetect.mock.funcDetect != nil {
		mmDetect.mock.t.Fatalf("SourceDetectorMock.Detect mock is already set by Set")
	}

	if mmDetect.defaultExpectation == nil {
		mmDetect.defaultExpectation = &SourceDetectorMockDetectExpectation{}
	}

	mmDetect.defaultExpectation.params = &SourceDetectorMockDetectParams{ctx, sourceURL}
	for _, e := range mmDetect.expectations {
		if minimock.Equal(e.params, mmDetect.defaultExpectation.params) {
			mmDetect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDetect.defaultExpectation.params)
		}
	}

	return mmDetect
}

// Inspect accepts an inspector function that has same arguments as the SourceDetector.Detect
func (mmDetect *mSourceDetectorMockDetect) Inspect(f func(ctx context.Context, sourceURL string)) *mSourceDetectorMockDetect {
	if mmDetect.mock.inspectFuncDetect != nil {
		mmDetect.mock.t.Fatalf("Inspect function is already set for SourceDetectorMock.Detect")
	}

	mmDetect.mock.inspectFuncDetect = f

	return mmDetect
}

// Return sets up results that will be returned by SourceDetector.Detect
func (mmDetect *mSourceDetectorMockDetect) Return(s1 domain.SourceType) *SourceDetectorMock {
	if mmDetect.mock.funcDetect != nil {
		mmDetect.mock.t.Fatalf("SourceDetectorMock.Detect mock is already set by Set")
	}

	if mmDetect.defaultExpectation == nil {
		mmDetect.defaultExpectation = &SourceDetectorMockDetectExpectation{mock: mmDetect.mock}
	}
	mmDetect.defaultExpectation.results = &SourceDetectorMockDetectResults{s1}
	return mmDetect.mock
}

// Set uses given function f to mock the SourceDetector.Detect method
func (mmDetect *mSourceDetectorMockDetect) Set(f func(ctx context.Context, sourceURL string) (s1 domain.SourceType)) *SourceDetectorMock {
	if mmDetect.defaultExpectation != nil {
		mmDetect.mock.t.Fatalf("Default expectation is already set for the SourceDetector.Detect method")
	}

	if len(mmDetect.expectations) > 0 {
		mmDetect.mock.t.Fatalf("Some expectations are already set for the SourceDetector.Detect method")
	}

	mmDetect.mock.funcDetect = f
	return mmDetect.mock
}

// When sets expectation for the SourceDetector.Detect which will trigger the result defined by the following
// Then helper
func (mmDetect *mSourceDetectorMockDetect) When(ctx context.Context, sourceURL string) *SourceDetectorMockDetectExpectation {
	if mmDetect.mock.funcDetect != nil {
		mmDetect.mock.t.Fatalf("SourceDetectorMock.Detect mock is already set by Set")
	}

	expectation := &SourceDetectorMockDetectExpectation{
		mock:   mmDetect.mock,
		params: &SourceDetectorMockDetectParams{ctx, sourceURL},
	}
	mmDetect.expectations = append(mmDetect.expectations, expectation)
	return expectation
}

// Then sets up SourceDetector.Detect return parameters for the expectation previously defined by the When method
func (e *SourceDetectorMockDetectExpectation) Then(s1 domain.SourceType) *SourceDetectorMock {
	e.results = &SourceDetectorMockDetectResults{s1}
	return e.mock
}

// Detect implements command.SourceDetector
func (mmDetect *SourceDetectorMock) Detect(ctx context.Context, sourceURL string) (s1 domain.SourceType) {
	mm_atomic.AddUint64(&mmDetect.beforeDetectCounter, 1)
	defer mm_atomic.AddUint64(&mmDetect.afterDetectCounter, 1)

	if mmDetect.inspectFuncDetect != nil {
		mmDetect.inspectFuncDetect(ctx, sourceURL)
	}

	mm_params := SourceDetectorMockDetectParams{ctx, sourceURL}

	// Record call args
	mmDetect.DetectMock.mutex.Lock()
	mmDetect.DetectMock.callArgs = append(mmDetect.DetectMock.callArgs, &mm_params)
	mmDetect.DetectMock.mutex.Unlock()

	for _, e := range mmDetect.DetectMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1
		}
	}

	if mmDetect.DetectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDetect.DetectMock.defaultExpectation.Counter, 1)
		mm_want := mmDetect.DetectMock.defaultExpectation.params
		mm_got := SourceDetectorMockDetectParams{ctx, sourceURL}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDetect.t.Errorf("SourceDetectorMock.Detect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDetect.DetectMock.defaultExpectation.results
		if mm_results == nil {
			mmDetect.t.Fatal("No results are set for the SourceDetectorMock.Detect")
		}
		return (*mm_results).s1
	}
	if mmDetect.funcDetect != nil {
		return mmDetect.funcDetect(ctx, sourceURL)
	}
	mmDetect.t.Fatalf("Unexpected call to SourceDetectorMock.Detect. %v %v", ctx, sourceURL)
	return
}

// DetectAfterCounter returns a count of finished SourceDetectorMock.Detect invocations
func (mmDetect *SourceDetectorMock) DetectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDetect.afterDetectCounter)
}

// DetectBeforeCounter returns a count of SourceDetectorMock.Detect invocations
func (mmDetect *SourceDetectorMock) DetectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDetect.beforeDetectCounter)
}

// Calls returns a list of arguments used in each call to SourceDetectorMock.Detect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDetect *mSourceDetectorMockDetect) Calls() []*SourceDetectorMockDetectParams {
	mmDetect.mutex.RLock()

	argCopy := make([]*SourceDetectorMockDetectParams, len(mmDetect.callArgs))
	copy(argCopy, mmDetect.callArgs)

	mmDetect.mutex.RUnlock()

	return argCopy
}

// MinimockDetectDone returns true if the count of the Detect invocations corresponds
// the number of defined expectations
func (m *SourceDetectorMock) MinimockDetectDone() bool {
	for _, e := range m.DetectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DetectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDetectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDetect != nil && mm_atomic.LoadUint64(&m.afterDetectCounter) < 1 {
		return false
	}
	return true
}

// MinimockDetectInspect logs each unmet expectation
func (m *SourceDetectorMock) MinimockDetectInspect() {
	for _, e := range m.DetectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SourceDetectorMock.Detect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DetectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDetectCounter) < 1 {
		if m.DetectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SourceDetectorMock.Detect")
		} else {
			m.t.Errorf("Expected call to SourceDetectorMock.Detect with params: %#v", *m.DetectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDetect != nil && mm_atomic.LoadUint64(&m.afterDetectCounter) < 1 {
		m.t.Error("Expected call to SourceDetectorMock.Detect")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SourceDetectorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDetectInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SourceDetectorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SourceDetectorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDetectDone()
}
